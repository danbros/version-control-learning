git clone [link repo]								# Clone any repo
git diff [ID 1 commit] [ID 2 commit]				# Compare diff
git diff [no arguments]								# Compare directory with staging area (show alt not are in stage)
git diff --stage									# Compare files in stage with last in repositories (only the add)
git config --global color.ui auto					# Color red and green when use git diff (global = all project)

git log												# Historic of commits
git checkout [id commit]							# Go to old commit (Att files for version at commit)

git init											# Iniciate new local repositore on current directory 
git status											# Display the staging area
git add [file name]									# Add files for stage
git add .											# Add all files for stage (modified and untracked)
git remove [file name]								# Remove file from stage 

git commits											# Open the Txt-Edit for choose the name of commit and save a new version of repo
git commit -m "commit msg"							# Save you new version without open the Txt-edit

git reset --hard									# Discasts all changes in directory and stage (reset for repo files)[WARNING]

git branch											# Display all branch on repository
git branch <any name>								# create new branch with name given
git checkout <branch name>							# Go to branch (commit will be make here now)

git checkout master									# Go to commit master			
git log --graph [--oneline] <name branch> <name branch>		# Show the structures of branches (with --oneline show exit small)
HEAD												# Curent commit
git checkout -b <name new branch>					# = git branch <name new branch> + git checkout <name new branch>

git merge <branch 1> <branch 2>	{*and HEAD*}		# Open editor for name you new "Merge branch"(look for what snap you point are)
git merge --abort									# Abort merge
git show <id commit>								# = git diff <you commit> <parent of you commit>
git branch -d <name branch>							# Exclude the label branch (normally use after merge)
git merge --abort					




Git Commit Message Style Guide						# https://udacity.github.io/git-styleguide/

Git/GitHub Cheating									# https://github.com/github/training-kit/blob/master/downloads/github-git-cheat-sheet.pdf

Conflito de mesclagem (caracteres de nova linha entre sistemas Windows e Unix)
https://help.github.com/articles/dealing-with-line-endings/#platform-all
https://help.github.com/en/articles/resolving-a-merge-conflict-using-the-command-line



Change Shell Color 
Linux/Mac: https://classroom.udacity.com/courses/ud775/lessons/2980038599/concepts/33331589510923
Win: https://classroom.udacity.com/courses/ud775/lessons/2980038599/concepts/33417185870923

# colors!
green="\[\033[1;32m\]"
blue="\[\033[1;34m\]"				My config colors
purple="\[\033[1;35m\]"
reset="\[\033[0m\]"

(If you have sublime 3 or up, do not enter with line below in ".bashrc" or ".bash_profile")
alias subl="/Applications/Sublime\ Text\ 2.app/Contents/SharedSupport/bin/subl"



Voltar 1 commit anterior e apagá-lo (só no git)
git reset --hard HEAD~1


Volta para um commit específico no github (apaga todos os outros)
git reset --hard "nome da tag ou Hash do Commit!"
git push origin HEAD --force
https://www.natanaelfonseca.com.br/2013/06/git-revertendo-para-um-commit-especifico.html